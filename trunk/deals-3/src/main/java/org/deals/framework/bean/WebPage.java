package org.deals.framework.bean;

// Generated by MyEclipse - Hibernate Tools

import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.Vector;

import org.deals.framework.bean.comparator.WebComponentComparator;
import org.deals.framework.core.UrlCreator;
import org.deals.framework.util.DateUtils;

/**
 * WebPage generated by MyEclipse - Hibernate Tools
 */
public abstract class WebPage extends AbstractWebPage implements java.io.Serializable {

	// Constructors

	/** default constructor */
	public WebPage() {
	}

	/** minimal constructor */
	public WebPage(PageState pageState, Users usersByWpLastModifier, Template template, Users usersByWpCreator, String wpName, Date wpCreated, Date wpLastModified, Integer wpWeight) {
		super(pageState, usersByWpLastModifier, template, usersByWpCreator, wpName, wpCreated, wpLastModified, wpWeight);
	}

	/** full constructor */
	public WebPage(PageState pageState, Users usersByWpLastModifier, Template template, PageType pageType, Users usersByWpCreator, String wpName, String wpDescription,
			String wpPageTitle, String wpContentTitle, String wpHeader, String wpContent, String wpFooter, Date wpCreated, Date wpLastModified, Date wpPublished, Integer wpWeight,
			Date wpExpire, String wpAuthor, boolean wpPrint, boolean wpSend, Set APagePagesForAppChild, Set APagePagesForAppParent, Set APageComponentses, Set AProfilePages, Set commentses) {
		super(pageState, usersByWpLastModifier, template, pageType, usersByWpCreator, wpName, wpDescription, wpPageTitle, wpContentTitle, wpHeader, wpContent, wpFooter, wpCreated,
				wpLastModified, wpPublished, wpWeight, wpExpire, wpAuthor, wpPrint, wpSend, APagePagesForAppChild, APagePagesForAppParent, APageComponentses, AProfilePages, commentses);
	}

	/**
	 * Restituisce tutte le componenti della pagina
	 * 
	 * @return
	 */
	public List<WebComponent> getComponents() {
		return getComponents(null);
	}

	/**
	 * Questa classe deve consentire di recupera in maniera trasparente le componenti associate ad
	 * una pagina. Le necessit� in generale sono: 1. poter filtrare le componenti per tipo
	 * componente 2. poter specificare un ordinamento sull'insieme dei risultati
	 */
	public List<WebComponent> getComponents(ComponentType typeFilter) {
		return getComponents(typeFilter, "", true);
	}

	/**
	 * 
	 * @param typeFilter
	 *            tipo componente su cui filtrare
	 * @param orderByField
	 *            campo su cui ordinare
	 * @param orderAsc
	 *            true se l'ordinamento � ascendente, false altrimenti
	 * @return componenti associate alla pagina, del tipo richiesto secondo l'ordinamento richiesto
	 */
	public List<WebComponent> getComponents(ComponentType typeFilter, String orderByField, boolean orderAsc) {
		List<WebComponent> result = new Vector<WebComponent>();
		Set apc = this.getAPageComponentses();
		for (Iterator iter = apc.iterator(); iter.hasNext();) {
			APageComponents element = (APageComponents) iter.next();
			if (element.getWebComponent() != null) {
				if (typeFilter == null || element.getWebComponent().getComponentType().equals(typeFilter)) {
					result.add(element.getWebComponent());
				}
			}
		}
		Collections.sort(result, new WebComponentComparator(orderByField, orderAsc));
		return result;
	}

	/**
	 * Questa classe deve consentire di recupera in maniera trasparente le componenti/associazioni
	 * associate ad una pagina. Le necessit� in generale sono: 1. poter filtrare le componenti per
	 * tipo componente 2. poter specificare un ordinamento sull'insieme dei risultati
	 */
	public List<APageComponents> getComponentsAssoc(ComponentType typeFilter) {
		return getComponentsAssoc(typeFilter, "", true);
	}

	/**
	 * recupera solo le risorse associate alla scheda, tranne i Links le risorse gestite nel tab
	 * Risorse della scheda
	 */
	public List<APageComponents> getComponentsAssocResources() {
		List<APageComponents> result = new Vector<APageComponents>();
		Set apc = this.getAPageComponentses();
		for (Iterator iter = apc.iterator(); iter.hasNext();) {
			APageComponents element = (APageComponents) iter.next();
			if (element.getWebComponent() != null) {
				if (element.getAPageComponentsType().equals(APageComponentsType.GENERIC_PAGE_IMAGE()) || element.getAPageComponentsType().equals(APageComponentsType.PAGE_IMAGE())
						|| element.getAPageComponentsType().equals(APageComponentsType.THUMBNAIL()) || element.getAPageComponentsType().equals(APageComponentsType.WEB_RESOURCE())) {
					result.add(element);
				}
			}
		}
		return result;
	}

	/**
	 * 
	 * @param typeFilter
	 *            tipo componente su cui filtrare
	 * @param orderByField
	 *            campo su cui ordinare
	 * @param orderAsc
	 *            true se l'ordinamento � ascendente, false altrimenti
	 * @return associzioni alla pagina, del tipo richiesto secondo l'ordinamento richiesto
	 */
	public List<APageComponents> getComponentsAssoc(ComponentType typeFilter, String orderByField, boolean orderAsc) {
		List<APageComponents> result = new Vector<APageComponents>();
		Set apc = this.getAPageComponentses();
		// se ho passato un filtro, lo applico
		if (typeFilter != null) {
			for (Iterator iter = apc.iterator(); iter.hasNext();) {
				APageComponents element = (APageComponents) iter.next();
				if (element.getWebComponent() != null) {
					if (typeFilter == null || element.getWebComponent().getComponentType().equals(typeFilter)) {
						result.add(element);
					}
				}
			}

		}
		// Altrimenti restituisco tutte le associazioni
		else {
			result.addAll(apc);
		}

		// Ordino le associzioni per chiave primaria, presumibilmente per ordine di inserimento nel
		// DB
		Collections.sort(result, new Comparator<APageComponents>() {
			public int compare(APageComponents o1, APageComponents o2) {
				if (o1 == null)
					return -1;
				if (o2 == null)
					return 1;
				return o1.getApcId() - o2.getApcId();
			}
		});

		// Doipo aver ordinato la collectione, Setto un id di riga sul campo fittizio rowId, serve
		// per l'aggancio nel repeater
		int rowId = 1;
		for (Iterator iter = result.iterator(); iter.hasNext();) {
			APageComponents element = (APageComponents) iter.next();
			element.setRowId(rowId);
			rowId = rowId + 1;
		}

		return result;
	}

	/**
	 * Restituisce la PageImage associata alla web page
	 * 
	 * @return page image trovata, altrimenti null
	 */
	public WebComponent getPageImage() {
		List<WebComponent> cps = getComponents();
		for (Iterator<WebComponent> iter = cps.iterator(); iter.hasNext();) {
			WebComponent comp = iter.next();
			Set apcs = comp.getAPageComponentses();
			for (Iterator iterator = apcs.iterator(); iterator.hasNext();) {
				APageComponents apc = (APageComponents) iterator.next();
				if (apc.getAPageComponentsType().equals(APageComponentsType.PAGE_IMAGE())) {
					return comp;
				}
			}
		}
		return null;
	}

	/**
	 * Restituisce la thumbnail associata alla web page
	 * 
	 * @return thumbnail trovata, altrimenti null
	 */
	public WebComponent getPageThumbnail() {
		List<WebComponent> cps = getComponents();
		for (Iterator<WebComponent> iter = cps.iterator(); iter.hasNext();) {
			WebComponent comp = iter.next();
			Set apcs = comp.getAPageComponentses();
			for (Iterator iterator = apcs.iterator(); iterator.hasNext();) {
				APageComponents apc = (APageComponents) iterator.next();
				if (apc.getAPageComponentsType().equals(APageComponentsType.THUMBNAIL())) {
					return comp;
				}
			}
		}
		return null;
	}

	/**
	 * Restituisce l'href della pagina
	 * 
	 * @return href della pagina
	 */
	public String getHref() {
		return UrlCreator.createUrl(getWpId(), getPageType());
	}

	// ////////////////////////////////////////////////////////////////////

	private String customXML = "";

	private String navigationMenuXML = "";

	private String breadCrumbsMenu = "";
	
	private StringBuffer commentsXML;

	public StringBuffer getCommentsXML() {
		return commentsXML;
	}

	public void setCommentsXML(StringBuffer commentsXML) {
		this.commentsXML = commentsXML;
	}

	public void setCustomXML(String customXML) {
		this.customXML = customXML;
	}

	private String getNavigationMenuXML() {
		return navigationMenuXML;
	}

	public void setNavigationMenuXML(String navigationMenuXML) {
		this.navigationMenuXML = navigationMenuXML;
	}

	private String getBreadCrumbsMenuXML() {
		return breadCrumbsMenu;
	}

	public void setBreadCrumbsMenuXML(String breadCrumbsMenuXML) {
		this.breadCrumbsMenu = breadCrumbsMenuXML;
	}

	/**
	 * Di default restituisce la stringa vuota, saranno poi i tipi pagina a definire il contenuto
	 * dei figli...
	 * 
	 * @return
	 */
	protected String getChildrenXML() {
		return "";
	}

	public String toXML() {
		return toXML("web-page");
	}

	/**
	 * Restituisce la codifica XML della pagina Web
	 * 
	 * @return codifica XML della pagina Web
	 */
	public String toXML(String rootElement) {
		StringBuffer sb = new StringBuffer();

		sb.append("<" + rootElement + " " + getAttributeId(getWpId()) + getAttributePageType(getPageType()) + ">");

		sb.append("<page-info>");
		sb.append(getTagName(getWpName()));
		sb.append(getTagDescription(getWpDescription()));
		sb.append(getTagPageTitle(getWpPageTitle()));
		sb.append(getTagCreated(getWpCreated()));
		sb.append(getTagLastModified(getWpLastModified()));
		sb.append(getTagPublished(getWpPublished()));
		sb.append(getTagCreator(getUsersByWpCreator()));
		sb.append(getTagLastModifier(getUsersByWpLastModifier()));
		// sb.append(getTagWeight(getWeight()));
		sb.append("<href>" + UrlCreator.createUrl(getWpId(), getPageType()) + "</href>\n");
		sb.append(getTagPageState(getPageState()));
		sb.append(getTagExpire(getWpExpire()));
		sb.append(getTagTemplate(getTemplate()));
		sb.append(getTagAuthor(getWpAuthor()));
		sb.append(getTagCanPrint(getWpPrint()));
		sb.append(getTagCanSend(getWpSend()));
		sb.append(getTagCanComment(isWpCommentsOn()));
		sb.append(getTagNumberComments());
		sb.append("</page-info>");

		sb.append(getBreadCrumbsMenuXML());
		sb.append(getNavigationMenuXML());
		sb.append(getCommentsXML());

		sb.append("<page-content>");
		sb.append(getTagPageImage(getPageImage()));
		sb.append(getTagPageThumbnail(getPageThumbnail()));
		sb.append(getTagContentTitle(getWpContentTitle()));
		sb.append(getTagHeader(getWpHeader()));
		sb.append(getTagContent(getWpContent()));
		sb.append(getTagFooter(getWpFooter()));
		sb.append("</page-content>");

		sb.append("<page-components>");
		sb.append("<sub-pages>");
		sb.append(getChildrenXML());
		sb.append("</sub-pages>");
		sb.append(customXML);
		for (int i = 0; i < getComponents().size(); i++) {
			if (getComponents().get(i) != null) {
				// qui non devo rimettere PageImage e Thumbnail,
				// quindi devo fare un controllo
				// if (!getComponents().get(i).getComponentType().equals(ComponentType.PAGE_IMAGE())
				// && !getComponents().get(i).getComponentType().equals(ComponentType.THUMBNAIL()))
				
				//TODO per ora commentato dovrebbee essere sostituito dal for seguente che usa le associazioni
				//sb.append(getComponents().get(i).toXML());
			}
		}
		for (Iterator iter = getAPageComponentses().iterator(); iter.hasNext();) {
			APageComponents apc = (APageComponents) iter.next();
			sb.append(apc.toXML());
		}
		
		sb.append("</page-components>");
		sb.append("</" + rootElement + ">");

		return sb.toString();
	}

	/**
	 * Restituisce l'attributo XML corrispondente all'id della pagina
	 * 
	 * @param id
	 *            id della pagina
	 * @return attributo XML corrispondente all'id della pagina
	 */
	protected String getAttributeId(int id) {
		return "id=\"" + id + "\" ";
	}

	/**
	 * Restituisce l'attributo XML corrispondente al tipo della pagina
	 * 
	 * @param pageType
	 *            tipo della pagina
	 * @return attributo XML corrispondente al tipo della pagina
	 */
	protected String getAttributePageType(PageType pageType) {
		if (pageType == null)
			return "type=\"\"";
		else
			return "type=\"" + pageType.getPtName() + "\" ";
	}

	/**
	 * Restituisce il tag XML corrispondente al nome della pagina
	 * 
	 * @param name
	 *            nome della pagina
	 * @return attributo XML corrispondente al nome della pagina
	 */
	protected String getTagName(String name) {
		if (name == null)
			name = "";
		return "<name>" + name + "</name>";
	}

	/**
	 * Restituisce il tag XML corrispondente alla descrizione della pagina
	 * 
	 * @param description
	 *            descrizione della pagina
	 * @return attributo XML corrispondente alla descrizione della pagina
	 */
	protected String getTagDescription(String description) {
		if (description == null)
			description = "";
		return "<description>" + description + "</description>";
	}

	/**
	 * Restituisce il tag XML corrispondente al titolo della pagina, quello che appare sulla barra
	 * del browser
	 * 
	 * @param pageTitle
	 *            titolo della pagina, quello che appare sulla barra del browser
	 * @return tag XML corrispondente al titolo della pagina, quello che appare sulla barra del
	 *         browser
	 */
	protected String getTagPageTitle(String pageTitle) {
		if (pageTitle == null)
			pageTitle = "";
		return "<page-title>" + pageTitle + "</page-title>";
	}

	/**
	 * Restituisce il tag XML corrispondente alla data di creazione della pagina
	 * 
	 * @param created
	 *            data di creazione della pagina
	 * @return tag XML corrispondente alla data di creazione della pagina
	 */
	protected String getTagCreated(Date created) {
		if (created == null)
			return "<created/>";
		else
			return "<created>" + DateUtils.toDateStringCustom(created) + "</created>";
	}

	/**
	 * Restituisce il tag XML corrispondente alla data di ultima modifica della pagina
	 * 
	 * @param lastModified
	 *            data di ultima modifica della pagina
	 * @return tag XML corrispondente alla data di ultima modifica della pagina
	 */
	protected String getTagLastModified(Date lastModified) {
		if (lastModified == null)
			return "<last-modified/>";
		else
			return "<last-modified>" + DateUtils.toDateStringCustom(lastModified) + "</last-modified>";
	}

	/**
	 * Restituisce il tag XML corrispondente alla data di pubblicazione della pagina
	 * 
	 * @param published
	 *            data di pubblicazione della pagina
	 * @return tag XML corrispondente alla data di pubblicazione della pagina
	 */
	protected String getTagPublished(Date published) {
		if (published == null)
			return "<published/>";
		else
			return "<published>" + DateUtils.toDateStringCustom(published) + "</published>";
	}

	/**
	 * Restituisce il tag XML corrispondente all'autore della pagina
	 * 
	 * @param author
	 *            autore della pagina
	 * @return tag XML corrispondente all'autore della pagina
	 */
	protected String getTagCreator(Users creator) {
		if (creator == null)
			return "<creator/>";
		else
			return "<creator>" + creator.toXML() + "</creator>";
	}

	/**
	 * Restituisce il tag XML corrispondente all'autore dell'ultima modifica sulla pagina
	 * 
	 * @param lastModifier
	 *            autore dell'ultima modifica sulla pagina
	 * @return tag XML corrispondente all'autore dell'ultima modifica sulla pagina
	 */
	protected String getTagLastModifier(Users lastModifier) {
		if (lastModifier == null)
			return "<last-modifier/>";
		else
			return "<last-modifier>" + lastModifier.toXML() + "</last-modifier>";
	}

	/**
	 * Restituisce il tag XML corrispondente allo stato della pagina
	 * 
	 * @param pageState
	 *            stato della pagina
	 * @return tag XML corrispondente allo stato della pagina
	 */
	protected String getTagPageState(PageState pageState) {
		if (pageState == null)
			return "<page-state/>";
		return "<page-state id=\"" + pageState.getPsId() + "\">" + pageState.toXML() + "</page-state>";
	}

	/**
	 * Restituisce il tag XML corrispondente al template associato alla pagina
	 * 
	 * @param template
	 *            template associato alla pagina
	 * @return tag XML corrispondente al template associato alla pagina
	 */
	protected String getTagTemplate(Template template) {
		if (template == null)
			return "<template/>";
		return "<template>" + template.getTeName() + "</template>";
	}

	/**
	 * Restituisce il tag XML corrispondente alla data di scadenza della pagina
	 * 
	 * @param expire
	 *            data di scadenza della pagina
	 * @return tag XML corrispondente alla data di scadenza della pagina
	 */
	protected String getTagExpire(Date expire) {
		if (expire == null)
			return "<expire/>";
		else
			return "<expire>" + DateUtils.toDateStringCustom(expire) + "</expire>";
	}

	/**
	 * Restituisce il tag XML corrispondente all'autore del contenuto della pagina
	 * 
	 * @param author
	 *            autore del contenuto della pagina
	 * @return tag XML corrispondente all'autore del contenuto della pagina
	 */
	protected String getTagAuthor(String author) {
		if (author == null)
			author = "";
		return "<author>" + author + "</author>";
	}

	/**
	 * Restituisce il tag XML che specifica la presenza del link per la stampa
	 * 
	 * @param canPrint
	 *            indica se deve essere visualizzato il link per la stampa
	 * @return tag XML che specifica la presenza del link per la stampa
	 */
	protected String getTagCanPrint(boolean canPrint) {
		if (canPrint) {
			String qsPrint = "print=true";
			if (getHref().indexOf("?") > -1) {
				qsPrint = "&amp;" + qsPrint;
			} else {
				qsPrint = "?" + qsPrint;
			}
			return "<print-link href=\"" + getHref() + qsPrint + "\"/>";
		} else {
			return "";
		}
	}

	/**
	 * Restituisce il tag XML che specifica la presenza del link per l'invio
	 * 
	 * @param canSend
	 *            indica se deve essere visualizzato il link per l'invio
	 * @return tag XML che specifica la presenza del link per l'invio
	 */
	protected String getTagCanSend(boolean canSend) {
		if (canSend)
			return "<send-link/>";
		else
			return "";
	}
	
	/**
	 * Restituisce il tag XML che specifica la possibilita' di commenti
	 * 
	 * @param canComment
	 *            indica se puo esserre commentato
	 * @return tag XML che specifica la presenza del link per l'invio
	 */
	protected String getTagCanComment(boolean canComment) {
		if (canComment)
			return "<comment-enabled/>";
		else
			return "";
	}

	/**
	 * Restituisce il tag XML che specifica il numero di commenti sulla pagina
	 * 
	 * @return tag XML che specifica la presenza del link per l'invio
	 */
	protected String getTagNumberComments() {
		int numComm = 0;
		for (Comments comment : (Set<Comments>)this.getCommentses()) {
			if (comment.getCommentApproved() == 1){
				numComm = numComm + 1;
			}
		}
		return "<number-comments>" + numComm + "</number-comments>";
	}
	
	protected String getTagPageImage(WebComponent pageImage) {
		if (pageImage == null) {
			List<WebPage> children = getChildren();
			if (children != null && children.size() > 0) {
				WebComponent pi = getChildren().get(0).getPageImage();
				if (pi != null)
					return "<page-image>" + pi.toXML() + "</page-image>";
			}
			return "<page-image/>";
		}
		return "<page-image>" + pageImage.toXML() + "</page-image>";
	}

	protected String getTagPageThumbnail(WebComponent pageThumbnail) {
		if (pageThumbnail == null) {
			List<WebPage> children = getChildren();
			if (children != null && children.size() > 0) {
				WebComponent pi = getChildren().get(0).getPageThumbnail();
				if (pi != null)
					return "<page-thumbnail>" + pi.toXML() + "</page-thumbnail>";
			}
			return "<page-thumbnail/>";
		}
		return "<page-thumbnail>" + pageThumbnail.toXML() + "</page-thumbnail>";
	}

	/**
	 * Restituisce il tag XML corrispondente al titolo di contenuto della pagina
	 * 
	 * @param contentTitle
	 *            titolo di contenuto della pagina
	 * @return tag XML corrispondente al titolo di contenuto della pagina
	 */
	protected String getTagContentTitle(String contentTitle) {
		if (contentTitle == null)
			contentTitle = "";
		return "<content-title>" + contentTitle + "</content-title>";
	}

	/**
	 * Restituisce il tag XML corrispondente all'header della pagina
	 * 
	 * @param header
	 *            header della pagina
	 * @return tag XML corrispondente all'header della pagina
	 */
	protected String getTagHeader(String header) {
		if (header == null)
			header = "";
		return "<header>" + header + "</header>";
	}

	/**
	 * Restituisce il tag XML corrispondente al contenuto della pagina
	 * 
	 * @param content
	 *            contenuto della pagina
	 * @return tag XML corrispondente al contenuto della pagina
	 */
	protected String getTagContent(String content) {
		if (content == null)
			content = "";
		return "<content>" + content + "</content>";
	}

	/**
	 * Restituisce il tag XML corrispondente al footer della pagina
	 * 
	 * @param footer
	 *            footer della pagina
	 * @return tag XML corrispondente al footer della pagina
	 */
	protected String getTagFooter(String footer) {
		if (footer == null)
			footer = "";
		return "<footer>" + footer + "</footer>";
	}

	// ///
	/**
	 * Restituisce tutti i figli di questa pagina
	 */
	public List<WebPage> getChildren() {
		return getChildren(null);
	}

	/**
	 * Restituisce tutti i figli di questa pagina del tipo pagina specificato
	 * 
	 * @param pt
	 *            tipo pagina richiesto
	 * @return lista delle pagine figlie, del tipo richiesto
	 */
	protected List<WebPage> getChildren(PageType pt) {
		Vector<WebPage> children = new Vector<WebPage>();
		List<APagePage> assoc = getChildrenAssoc(pt);
		for (Iterator<APagePage> iter = assoc.iterator(); iter.hasNext();) {			
			children.add(iter.next().getWebPageByAppChild());
		}
		return children;
	}

	/**
	 * Restituisce le associazioni con i figli
	 * 
	 * @param pt
	 * @return
	 */
	protected List<APagePage> getChildrenAssoc(PageType pt) {
		Vector<APagePage> result = new Vector<APagePage>();
		Vector<APagePage> temp = new Vector<APagePage>();
		for (Iterator iter = getAPagePagesForAppParent().iterator(); iter.hasNext();) {
			APagePage element = (APagePage) iter.next();
			temp.add(element);
		}
		
		if (getWpDescription() != null && getWpDescription().equals("wp_published")){
			Collections.sort(temp, new Comparator<APagePage>() {
				public int compare(APagePage o1, APagePage o2) {
					if (o1 == null)
						return -1;
					if (o2 == null)
						return 1;
					return -o1.getWebPageByAppChild().getWpPublished().compareTo(o2.getWebPageByAppChild().getWpPublished());
				}
			});
		}
		else{
		Collections.sort(temp, new Comparator<APagePage>() {
			public int compare(APagePage o1, APagePage o2) {
				if (o1 == null)
					return -1;
				if (o2 == null)
					return 1;
				return o1.getAppWeight() - o2.getAppWeight();
			}
		});
		}

		for (Iterator iter = temp.iterator(); iter.hasNext();) {
			APagePage element = (APagePage) iter.next();
			if (pt == null) {
				result.add(element);
			} else if (element.getWebPageByAppChild().getPageType().equals(pt)) {
				result.add(element);
			}
		}
		return result;
	}

	/**
	 * Restituisce tutti i padri di questa pagina
	 * 
	 * @return
	 */
	public List<WebPage> getParents() {
		return getParents(null);
	}

	/**
	 * Restituisce tutti i padri di questa pagina del tipo pagina specificato
	 * 
	 * @param pt
	 *            tipo pagina richiesto
	 * @return lista della pagine padri del tipo richiesto
	 */
	protected List<WebPage> getParents(PageType pt) {
		Vector<WebPage> parents = new Vector<WebPage>();
		List<APagePage> assoc = getParentsAssoc(pt);
		for (Iterator<APagePage> iter = assoc.iterator(); iter.hasNext();) {
			parents.add(iter.next().getWebPageByAppParent());
		}
		return parents;
	}

	protected List<APagePage> getParentsAssoc(PageType pt) {
		Vector<APagePage> result = new Vector<APagePage>();
		Vector<APagePage> temp = new Vector<APagePage>();
		for (Iterator iter = getAPagePagesForAppChild().iterator(); iter.hasNext();) {
			APagePage element = (APagePage) iter.next();
			temp.add(element);
		}

		Collections.sort(temp, new Comparator<APagePage>() {
			public int compare(APagePage o1, APagePage o2) {
				if (o1 == null)
					return -1;
				if (o2 == null)
					return 1;
				return o1.getAppWeight() - o2.getAppWeight();
			}
		});

		for (Iterator iter = temp.iterator(); iter.hasNext();) {
			APagePage element = (APagePage) iter.next();
			if (pt == null) {
				result.add(element);
			} else if (element.getWebPageByAppParent().getPageType().equals(pt)) {
				result.add(element);
			}
		}
		return result;
	}

	public int getWeight(WebPage parent) {
		Set apps = getAPagePagesForAppChild();
		for (Iterator iter = apps.iterator(); iter.hasNext();) {
			APagePage element = (APagePage) iter.next();
			if (element.getWebPageByAppParent().equals(parent))
				return element.getAppWeight();
		}
		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null)
			return false;
		return getWpId().equals(((WebPage) obj).getWpId());
	}

}
